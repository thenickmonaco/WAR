searchState.loadedDescShard("portaudio", 0, "rust-portaudio\nAL API\nAlsa API\nASIO API\nAudio Science HPI\nBeOS API\nCore Audio API\nSome custom sample format.\nThe type used to refer to audio devices.\nA structure providing information and capabilities of …\nAn iterator yielding the <strong>DeviceIndex</strong> for each available …\nDirect sound\nUses -1.0 and +1.0 as the minimum and maximum respectively.\nThe special value may be used to request that the stream …\nAn type alias used to represent a given number of frames.\nThe type used to enumerate to host APIs at runtime. Values …\nA structure containing information about a particular host …\nUnchanging unique identifiers for each supported host API\nAn iterator yielding the <strong>HostApiIndex</strong> for each available …\nStructure used to return information about a host error …\n16-bit signed integer sample representation.\n24-bit signed integer sample representation.\n32-bit signed integer sample representation.\n8-bit signed integer sample representation.\nIn development host\nJack API\nThe lifetime of the <code>PortAudio</code> instance.\nMMe API\nOSS API\nA type-safe wrapper around the PortAudio API.\npublic trait to constraint pa::Stream for specific types\nA type used to dynamically represent the various standard …\nSound manager API\nAllowable return values for the PaStreamCallback. @see …\nThe type used to represent monotonic time in seconds.\nAn unsigned 8 bit format where 128 is considered “ground…\nThis variant is used when none of the above variants can …\nWASAPI\nWDMKS\nConvert a host-API-specific device index to standard …\nThe code of the error\nProduce the default <strong>DuplexStreamSettings</strong> with the given …\nThe default high latency for input with this device\nThe default high latency for output with this device\nRetrieve the index of the default host API.\nRetrieve the index of the default input device. The result …\nThe index to the default input device or None if no input …\nProduce the default <strong>StreamParameters</strong> for an <strong>Input</strong> <strong>Stream</strong>.\nProduce the default <strong>InputStreamSettings</strong> with the given …\nThe default low latency for input with this device\nThe default low latency for output with this device\nRetrieve the index of the default output device. The …\nThe index to the default output device or None if no …\nProduce the default <strong>StreamParameters</strong> for an <strong>Output</strong> <strong>Stream</strong>.\nProduce the default <strong>OutputStreamSettings</strong> with the given …\nThe default sample rate for this device\nRetrieve the number of available devices.\nThe total count of device in the host\nRetrieve a <strong>DeviceInfo</strong> structure containing information …\nProduces an iterator yielding the <strong>DeviceIndex</strong> for each …\nA module for implementing the Portaudio Error type and …\nPortaudio platform specific extensions.\nConverts <code>self</code> into the respective <strong>SampleFormatFlags</strong>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a HostErrorInfo from the equivalent C struct.\nConstruct the HostApiInfo from the equivalent C struct.\nConstruct a <strong>DeviceInfo</strong> from the equivalent C struct.\nInspects the given <strong>SampleFormatFlags</strong> for the format.\nRetrieve the size of a given sample format in bytes.\nHost API identifier\nRetrieve the number of available host APIs.\nRetrieve a pointer to a structure containing information …\nThe host API which returned the error code\nConvert a static host API unique identifier, into a …\nProduces an iterator yielding the <strong>HostApiIndex</strong> of each …\nThe type of the current host\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine whether it would be possible to open a duplex …\nDetermine whether it would be possible to open an …\nDetermine whether it would be possible to open an …\nReturn information about the last host error encountered.\nMaximal number of input channels for this device\nmaximal number of output channel for this device\nThe name of the host\nThe name of the device\nConstruct a <strong>PortAudio</strong> instance.\nOpen a new blocking <strong>Stream</strong> with the given settings.\nOpen a new non-blocking <strong>Stream</strong> with the given settings.\nRetrieve the SampleFormat variant associated with the type.\nReturns the size of the <strong>SampleFormat</strong> in bytes.\nPut the caller to sleep for at least ‘msec’ …\nThis module aims to provide a user-friendly rust-esque …\nThe version of the struct\nThe version of the struct\nTakes ownership of <code>self</code> and terminates the PortAudio API …\nThe string which explain the error\nRetrieve the release number of the currently running …\nRetrieve the release number of the currently running …\nRetrieve a textual description of the current PortAudio …\nRetrieve a textual description of the current PortAudio …\nInvalid buffer\nInput device not compatible with output device\nInvalid Stream\nThe buffer is too big\nThe buffer is too small\nPortaudio cannot read from the callback stream\nPortaudio cannot read from an output only stream\nPortaudio cannot write to the callback stream\nPortaudio cannot write to an input only stream\nDevice unavailable\nError codes returned by PortAudio functions.\nThe host API is not found by Portaudio\nStream info not compatible with the host\nThe stream is not compatible with the host API\nThe input stream has overflowed\nMemory insufficient\nPortaudio internal error\nInvalid channel count\nInvalid Device\nInvalid Flag\nThe host API is invalid\nInvalid sample rate\nNo audio devices\nNo Error\nPortaudio not initialized\nInvalid callback\nThe output has underflowed\nThe Sample format is not supported\nThe stream is not stopped\nThe stream is stopped\nTime out\nUnanticipated error from the host\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescribes stream availability and the number for frames …\nA <strong>Stream</strong> <strong>Mode</strong> representing a blocking stream.\nThe buffer used to transfer audio data between the input …\nThe type of buffer(s) necessary for transferring audio in …\nThe arguments passed to the non-blocking stream callback.\nTiming information for the buffer passed to the stream …\nA type of <strong>Flow</strong> that describes a bi-directional (input <em>and</em> …\nArguments given to a <strong>NonBlocking</strong> <strong>Input</strong> <strong>Stream</strong>’s …\nTiming information for the buffers passed to the stream …\nSettings used to construct a <strong>Duplex</strong> <strong>Stream</strong>.\nThere are three possible <strong>Flow</strong>s available for a <strong>Stream</strong>: …\nThe <strong>Flow</strong> of the <strong>Stream</strong> (<strong>Input</strong>, <strong>Output</strong> or <strong>Duplex</strong>).\nThe number of frames available for reading.\nA structure containing unchanging information about an …\nA type of <strong>Flow</strong> that describes an input-only <strong>Stream</strong>.\nArguments given to a <strong>NonBlocking</strong> <strong>Input</strong> <strong>Stream</strong>’s …\nTiming information for the buffer passed to the input …\nThe input stream has overflowed.\nSettings used to construct an <strong>Input</strong> <strong>Stream</strong>.\nThere are two <strong>Mode</strong>s with which a <strong>Stream</strong> can be set: …\nA <strong>Stream</strong> <strong>Mode</strong> representing a non-blocking stream.\nA type of <strong>Flow</strong> that describes an output-only <strong>Stream</strong>.\nArguments given to a <strong>NonBlocking</strong> <strong>Input</strong> <strong>Stream</strong>’s …\nTiming information for the buffer passed to the output …\nSettings used to construct an <strong>Out</strong> <strong>Stream</strong>.\nThe output stream has underflowed.\nParameters for one direction (input or output) of a stream.\n<strong>Streams</strong> that can be read by the user.\nThe sample format for the readable buffer.\nThe sample format for the writable buffer.\nTypes used to open a <strong>Stream</strong> via the …\nA type-safe PortAudio PaStream wrapper.\n<strong>Streams</strong> that can be written to by the user for output to …\nTerminates audio processing immediately without waiting …\nThe buffer of interleaved samples read from the <strong>Input</strong> …\nThe <strong>Output</strong> <strong>Stream</strong>’s buffer, to which we will write our …\nThe time when the first sample of the input buffer was …\nThe time when the first sample of the output buffer will …\nA type safe wrapper around PortAudio’s stream callback …\nThe number of channels in the readable <strong>Buffer</strong>.\nThe number of channels in the writable <strong>Buffer</strong>.\nThe number of channels for this device\nCloses an audio stream.\nRetrieve CPU usage information for the specified stream.\nThe time when the stream callback was invoked.\nThe time when the stream callback was invoked.\nThe time when the stream callback was invoked.\nIndex of the device to be used, or a variant indicating to …\nA type safe wrapper around PortAudio’s stream flags.\nFlags indicating the current state of the stream and …\nFlags indicating the current state of the stream and …\nFlags indicating the current state of the stream and …\nAny special <strong>Stream</strong> behaviour we require given as a set of …\nAny special <strong>Stream</strong> behaviour we require given as a set of …\nAny special <strong>Stream</strong> behaviour we require given as a set of …\nThe number of frames of audio data stored within the <code>buffer</code>…\nThe number of frames of audio data stored within the <code>buffer</code>…\nThe number of frames of audio data stored within the <code>buffer</code>…\nThe number of audio frames that are read per buffer.\nThe number of audio frames requested per buffer.\nThe number of audio frames requested per buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given <code>C_PaStreamParameters</code> into their …\nThe same as <strong>Parameters::new</strong>, but the device(s) to be used …\nThe buffer of interleaved samples read from the <strong>Stream</strong>’s …\nThe time when the first sample of the input buffer was …\nThe set of Parameters necessary for constructing the input …\nRetrieve a Info structure containing information about the …\nThe input latency for this open stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <strong>Stream</strong>’s <strong>Flow</strong> alongside the rest of its …\nDetermine whether the stream is active.\nIndicates the format of the audio buffer.\nDetermine whether the stream is stopped.\nConstruct a new <strong>Parameters</strong>.\nConstruct the settings from the given <code>params</code>, <code>sample_rate</code> …\nConstruct the settings from the given <code>params</code>, <code>sample_rate</code> …\nConstruct the settings from the given <code>params</code>, <code>sample_rate</code> …\nConstruct a new <strong>Self::Buffer</strong>.\nConstructs the <strong>Flow</strong>’s associated <strong>CallbackArgs</strong> from the …\nOpen a new <strong>NonBlocking</strong> <strong>Stream</strong> with the given <strong>Flow</strong> and …\nOpen a new <strong>Blocking</strong> <strong>Stream</strong> with the given <strong>Flow</strong> and …\nThe <strong>Stream</strong>’s output buffer, to which we will write …\nThe time when the first sample of the output buffer will …\nThe set of Parameters necessary for constructing the …\nThe output latency for this open stream\nThe set of Parameters necessary for constructing the <strong>Stream</strong>…\nThe set of Parameters necessary for constructing the <strong>Stream</strong>…\nNecessary for dynamically acquiring bi-directional params …\nRead samples from an input stream.\nRetrieve the number of frames that can be read from the …\nBorrow the readable <strong>Buffer</strong>.\nThe number of audio frames read per second.\nThe number of audio frames written per second.\nThe number of audio frames written per second.\nThe sample rate for this open stream\nCommences audio processing.\nTerminates audio processing.\nStruct version\nThe suggested latency for this device\nReturns the current time in seconds for a stream according …\nTiming information relevant to the callback.\nTiming information relevant to the callback.\nTiming information relevant to the callback.\nThis function is solely for use within the extension …\nConstruct the settings with the given <strong>Parameters</strong>, …\nConstruct the settings with the given <strong>Parameters</strong>, …\nConstruct the settings with the given <strong>Parameters</strong>, …\nMutably borrow the the writable <strong>Buffer</strong>.\nWrite samples to an output stream.\nRetrieve the number of frames that can be written to the …\nFlag bit constants for the status flags passed to the …\nIn a stream opened with paFramesPerBufferUnspecified, …\nIn a stream opened with paFramesPerBufferUnspecified, …\nNo flags.\nIndicates that output data will be discarded because no …\nIndicates that output data (or a gap) was inserted, …\nSome of all of the output data will be used to prime the …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDisable default clipping of out of range samples.\nDisable default dithering.\nFlags used to control the behaviour of a stream. They are …\nFlag requests that where possible a full duplex stream …\nNo flags.\nA mask specifying the platform specific bits.\nCall the stream callback to fill initial output buffers, …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.")