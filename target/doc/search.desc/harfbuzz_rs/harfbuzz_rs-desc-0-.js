searchState.loadedDescShard("harfbuzz_rs", 0, "<code>harfbuzz_rs</code> is a high-level interface to HarfBuzz, …\nA <code>Blob</code> manages raw data like e.g. file contents. It refers …\nText is set vertically from bottom to top.\nA type that can be used to serialize a <code>GlyphBuffer</code>.\nAn iterator over the codepoints stored in a <code>UnicodeBuffer</code>.\nDefines the direction in which text is to be read.\nA wrapper around <code>hb_face_t</code>.\nA feature tag with an accompanying range specifying on …\nA type representing a single font (i.e. a specific …\nSerialize glyph extents.\nSerialize glyph flags.\nA <code>GlyphBuffer</code> contains the resulting output information of …\nA set of flags that may be set during shaping on each …\n<code>GlyphPosition</code> is the structure that holds the positions of …\nContains a <code>GlyphBuffer</code>\nA trait which is implemented for all harffbuzz wrapper …\nInitial, unset direction.\nA machine-readable JSON format.\nText is set horizontally from left to right.\nDo not serialize glyph advances, glyph offsets will …\nDo not serialize glyph cluster.\nDo no serialize glyph name.\nDo not serialize glyph position information.\nThe string contains non-ASCII characters.\nA smart pointer that wraps a singly owned harfbuzz object.\nType of the raw harfbuzz object.\nText is set horizontally from right to left.\nFlags used for serialization with a <code>BufferSerializer</code>.\nThe serialization format used in <code>BufferSerializer</code>.\nA smart pointer that wraps an atomically reference counted …\nA type to represent 4-byte SFNT tags.\nAn Error generated when a <code>Tag</code> fails to parse from a <code>&amp;str</code> …\nA human-readable, plain text format\nText is set vertically from top to bottom.\nThis type provides an interface to create one of the …\nContains a <code>UnicodeBuffer</code>\nA <code>UnicodeBuffer</code> can be filled with unicode text and …\nA variation selector which can be applied to a specific …\nThe string has length zero.\nAdd a single codepoint with the associated cluster value …\nAdd the string slice <code>str_slice</code> to the <code>Buffer</code>’s array of …\nAdd a string item to the buffer, providing context.\nReturns the set containing all flags.\nAppend codepoints from another <code>UnicodeBuffer</code> to the end of …\nAppend a range of codepoints from another <code>UnicodeBuffer</code> to …\nReturns the underlying harfbuzz object pointer.\nReturns the underlying harfbuzz object pointer with the …\nReturns the underlying harfbuzz object pointer with the …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nClears the contents of the glyph buffer and returns an …\nClear the contents of the buffer (i.e. the stored string …\nReturns a copy and increases the reference count.\nReturns an Iterator over the stored unicode codepoints.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nCreates an immutable <code>Blob</code> that contains part of the data …\nCreate a new sub font from the current font that by …\nDecreases the reference count of the HarfBuzz object and …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns a “null” face.\nReturns an empty font.\nReturns a shared pointer to the face from which this font …\nContains the <code>FontFuncs</code> trait.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nCreate a face from the bytes of a given slice and an index …\nCreate a <code>Blob</code> from the contents of the file at <code>path</code> whose …\nCreate a new face from the contents of the file at <code>path</code>.\nCreate from raw value of type <code>hb_direction_t</code>.\nCreates a <code>Owned</code> safely wrapping a raw harfbuzz pointer.\nCreates a <code>Shared</code> from an owned raw harfbuzz pointer.\nCreates a <code>Shared</code> by cloning a raw harfbuzz pointer.\nParses a <code>Tag</code> from a <code>&amp;str</code> that contains four or less ASCII …\nCreate a new face from a closure that returns a raw <code>Blob</code> …\nRetrieve the cluster level of the buffer.\nGet a slice of the <code>Blob</code>’s bytes.\nReturns the <code>Buffer</code>’s text direction.\nGet the horizontal advance width of a glyph.\nGet the glyph infos.\nGet the glyph positions.\nGet the vertical advance width of a glyph.\nGet the buffer language.\nGet the ISO15924 script tag.\nGet the segment properties (direction, language, script) …\nReturns the number of glyphs contained in the face.\nGuess the segment properties (direction, language, script) …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this buffer to a raw harfbuzz object pointer.\nConverts this buffer to a raw harfbuzz object pointer.\nConverts <code>self</code> into the underlying harfbuzz object pointer …\nConverts <code>self</code> into the underlying harfbuzz object pointer …\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if the buffer contains no elements.\nReturns <code>true</code> if the buffer contains no elements.\nReturns <code>true</code> if no flags are currently stored.\nReturns true if the blob is immutable.\nReturns the length of the data of the buffer.\nReturns the length of the data of the buffer.\nMakes this blob immutable so the bytes it refers to will …\nCreates a new empty <code>Buffer</code>.\nCreate a <code>Tag</code> from its four-char textual representation.\nCreate a new <code>Face</code> from the data.\nCreate a new font from the specified <code>Face</code>.\nCreate a new Variation with provided <code>tag</code> and <code>value</code>.\nCreate a new <code>Feature</code> struct.\nReturns the complement of this set of flags.\nReturns a shared pointer to the parent font.\nPre-allocate the buffer to hold a string at least <code>size</code> …\nIncreases the reference count of the HarfBuzz object.\nRemoves the specified flags in-place.\nReverse the <code>Buffer</code>’s contents.\nReverse the <code>Buffer</code>’s contents in the range from <code>start</code> to …\nReturns the EM scale of the font.\nReturns a serializer that allows the contents of the …\nInserts or removes the specified flags depending on the …\nSet the cluster level of the buffer.\nSet the text direction of the <code>Buffer</code>’s contents.\nSets the font functions that this font will have from a …\nSet the buffer language.\nSets the EM scale of the font.\nSet the script from an ISO15924 tag.\nSet font variation settings.\nShape the contents of the buffer using the provided font …\nGet the stored codepoints as a <code>String</code>.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the slice of bytes for the table named <code>tag</code> or None …\nReturns the <code>tag</code> of the variation.\nTakes ownership of the raw <code>hb_buffer_t</code> object and converts …\nReturns tag as 4-element byte array.\nConvert into raw value of type <code>hb_direction_t</code>.\nDemotes an <code>Owned</code> pointer to a <code>Shared</code> pointer.\nToggles the specified flags in-place.\nTry to get a mutable slice of the <code>Blob</code>’s bytes, possibly …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nIf <code>true</code>, indicates that if input text is broken at the …\nReturns the value of the variation.\nCreate a new <code>Blob</code> from the slice <code>bytes</code>. The blob will not …\nCreate a new <code>Blob</code> from the mutable slice <code>bytes</code>. The blob …\nCreate a new <code>Blob</code> from a type that owns a byte slice, …\nhow much the line advances after drawing this glyph when …\nhow much the glyph moves on the X-axis before drawing it, …\nhow much the line advances after drawing this glyph when …\nhow much the glyph moves on the Y-axis before drawing it, …\nThis Trait specifies the font callbacks that harfbuzz uses …")