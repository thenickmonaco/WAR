searchState.loadedDescShard("midir", 0, "An error that can occur when trying to connect to a port.\nThe kind of error for a <code>ConnectError</code>.\nAn enum that is used to specify what kind of MIDI messages …\nAn error that can occur during initialization (i.e., while …\nTrait that abstracts over input and output ports.\nAn instance of <code>MidiInput</code> is required for anything related …\nRepresents an open connection to a MIDI input port.\nAn object representing a single input port. How the port …\nA collection of input ports.\nAn instance of <code>MidiOutput</code> is required for anything related …\nRepresents an open connection to a MIDI output port.\nAn object representing a single output port. How the port …\nA collection of output ports.\nType of an input or output port structure.\nAn error that can occur when retrieving information about …\nAn error that can occur when sending MIDI messages.\nCloses the connection. The returned values allow you to …\nCloses the connection. The returned value allows you to …\nConnect to a specified MIDI input port in order to receive …\nConnect to a specified MIDI output port in order to send …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet flags to decide what kind of messages should be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MidiInput</code> object that is required for any …\nCreates a new <code>MidiOutput</code> object that is required for any …\nHelper method to create ConnectErrorKind::Other.\nGet the number of available MIDI input or output ports.\nGet the number of available MIDI input ports that <em>midir</em> …\nGet the number of available MIDI output ports that <em>midir</em> …\nGet the name of a specified MIDI input or output port.\nGet the name of a specified MIDI input port.\nGet the name of a specified MIDI output port.\nGet a collection of all MIDI input or output ports. The …\nGet a collection of all MIDI input ports that <em>midir</em> can …\nGet a collection of all MIDI output ports that <em>midir</em> can …\nSend a message to the port that this output connection is …\nTrait that is implemented by <code>MidiInput</code> on platforms that …\nTrait that is implemented by <code>MidiOutput</code> on platforms that …\nCreates a virtual input port. Once it has been created, …\nCreates a virtual output port. Once it has been created, …")