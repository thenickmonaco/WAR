searchState.loadedDescShard("glfw", 0, "An idiomatic wrapper for the GLFW library.\nSpecifies the desired bit depth of the alpha component of …\nSpecifies the desired bit depth of the blue component of …\nSpecifies the desired bit depth of the green component of …\nSpecifies the desired bit depth of the red component of …\nInput actions.\nIf either of the <code>WGL_EXT_swap_control_tear</code> and …\nSpecifies the desired bit depth of the alpha component of …\nDeprecated. Does not occur.\nThe regular arrow cursor shape.\nSpecifies whether the (full screen) window will …\nSpecifies the desired number of auxiliary buffers.\nSpecifies the desired bit depth of the blue component of …\nThe left mouse button. A <code>MouseButtonLeft</code> alias is provided …\nThe right mouse button. A <code>MouseButtonRight</code> alias is …\nThe middle mouse button. A <code>MouseButtonMiddle</code> alias is …\nSpeficies whether the cursor should be centered over newly …\nSpecifies which <code>ClientApi</code> to create the context for.\nClient API tokens.\nSpecifies whether to set the current directory to the …\nSpecifies the UTF-8 encoded name to use for autosaving the …\nSpecifies whether to in participate in Automatic Graphics …\nSpecifies whether to create a basic menu bar, either from …\nSpecifies whether to use full resolution framebuffers on …\nMethods common to renderable contexts\nSpecifies the API to use to create the context\nSpecifies which context creation API to use to create the …\nSpecifies whether the OpenGL or OpenGL ES contexts do not …\n<code>ContextReleaseBehavior</code> specifies the release behavior to …\nSpecifies the behavior of the OpenGL pipeline when a …\nSpecifies the <code>ContextRobustness</code> strategy to be used.\nContext robustness tokens.\nSpecifies the client API version that the created context …\nSpecifies the major client API version that the created …\nSpecifies the minor client API version that the created …\nThe crosshair shape.\nRepresents a window cursor that can be used to display any …\nCursor modes.\nFormats the type using aliases rather than the default …\nSpecifies whether the window will have platform-specific …\nSpecifies the desired bit depth of the depth component of …\nSpecifies whether the framebuffer should be double …\nTokens corresponding to various error types.\nAn error callback. This can be supplied with some user …\nA callback that triggers a task failure when an error is …\nSpecifies whether the window will be floating above other …\n<code>Flush</code> tells the context to flush the pipeline whenever the …\nAn iterator that yields until no more messages are …\nSpecifies whether the window will be given input focus …\nSpecifies whether the windowed mode window will be given …\nFull screen mode. Contains the monitor on which the window …\nAn OpenGL process address.\nAxis identifier tokens.\nButton identifier tokens.\nState of a gamepad.\nDescribes the gamma ramp of a monitor.\nA token from which to call various GLFW functions. It can …\nSpecifies the desired bit depth of the green component of …\nThe horizontal resize arrow shape.\nThe hand shape.\nThe text input I-beam cursor shape.\nAn error that might be returned when <code>glfw::init</code> is called.\nInitialization hints that can be set using the <code>init_hint</code> …\nAn internal error occurred when trying to initialize the …\nA joystick handle.\nAn joystick callback. This can be supplied with some user …\nJoystick events.\nSpecifies whether to also expose joystick hats as buttons, …\nJoystick hats.\nJoystick identifier tokens.\nInput keys.\nA callback that logs each error as it is encountered …\nKey modifiers (e.g., Shift, Control, Alt, Super)\nA struct that wraps a <code>*GLFWmonitor</code> handle.\nAn monitor callback. This can be supplied with some user …\nMonitor events.\nMouse buttons. The <code>MouseButtonLeft</code>, <code>MouseButtonRight</code>, and …\nAlias to <code>MouseButton1</code>, supplied for improved clarity.\nAlias to <code>MouseButton3</code>, supplied for improved clarity.\nAlias to <code>MouseButton2</code>, supplied for improved clarity.\n<code>None</code> tells the context to NOT flush the pipeline on release\nSpecifies no waits\nSpecifies whether to create a debug OpenGL context, which …\nSpecifies whether the OpenGL context should be …\nSpecifies which OpenGL profile to create the context for. …\nOpenGL profile tokens.\nWhen not using the <code>image</code> library, or if you just want to, …\nSpecifies the desired bit depth of the red component of …\nSpecifies the desired refresh rate for full screen …\nA rendering context that can be shared between tasks.\nSpecifies whether the window will be resizable by the …\nSpecifies whether the framebuffer should be sRGB capable.\nSpecifies the desired number of samples to use for …\nSpecifies whether the window content area should be …\nKeyboard code returned by the OS\nStandard cursors provided by GLFW\nSpecifies the desired bit depth of the stencil component …\nSpecifies whether to use stereoscopic rendering.\nSpecifies how the context should handle swapping the …\nSynchronizes the buffers every N frames. Set to 1 for …\nSpecifies whether the window framebuffer will be …\nThe vertical resize arrow shape.\nDescribes a single video mode.\nSpecifies whether the window will be visible on creation.\nA struct that wraps a <code>*GLFWwindow</code> handle.\nWindow event messages.\nWindow hints that can be set using the <code>window_hint</code> …\nUnique identifier for a <code>Window</code>.\nDescribes the mode of a window\nWindowed mode.\nSpecifies the desired ASCII-encoded class part of the …\nSpecifies the desired ASCII-encoded instance part of the …\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nCalling this method forces the destructor to be called, …\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nCreates a new cursor from the <code>PixelImage</code> provided via …\nWrapper for <code>glfwCreateWindow</code>.\nCreates a new window.\nResets the window hints previously set by the <code>window_hint</code> …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nWrapper for <code>glfwGetInputMode</code> called with <code>LOCK_KEY_MODS</code>\nCloses the window and performs the necessary cleanups. …\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns <code>true</code> if the specified OpenGL or context creation …\nThe function to be used with the <code>FAIL_ON_ERRORS</code> callback.\nLow-level function bindings and constants pertaining to …\nReturns an iterator that yields until no more messages are …\nReturns a string representation of the video mode.\nWrapper for <code>glfwFocusWindow</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConverts from <code>i32</code>.\nConverts from <code>i32</code>.\nConverts from <code>i32</code>.\nConverts from <code>i32</code>.\nWrapper for <code>glfwGetJoystickAxes</code>.\nWrapper for <code>glfwGetJoystickButtons</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>CLIENT_API</code>.\nWrapper for <code>glfwGetClipboardString</code>.\nWrapper for <code>glfwGetMonitorContentScale</code>.\nWrapper for <code>glfwGetWindowContentScale</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with …\nWrapper for <code>glfwGetWindowAttrib</code> called with …\nWrapper for <code>glfwGetInputMode</code> called with <code>CURSOR</code>.\nWrapper for <code>glfwGetCursorPos</code>.\nWrapper for <code>glfwGetWindowFrameSize</code>\nWrapper for <code>glfwGetFramebufferSize</code>.\nWrapper for <code>glfwGetGamepadName</code>.\nWrapper for <code>glfwGetGamepadState</code>.\nWrapper for <code>glfwGetGammaRamp</code>.\nWrapper for <code>glfwGetGLXContext</code>\nWrapper for <code>glfwGetJoystickGUID</code>.\nWrapper for <code>glfwGetJoystickHats</code>.\nConstructs a <code>Joystick</code> handle corresponding to the supplied …\nWrapper for <code>glfwGetKey</code>.\nWrapper around <code>glfwGetKeyName</code>\nWrapper around <code>glfwGetKeyScancode</code>.\nWrapper for <code>glfwGetMouseButton</code>.\nWrapper for <code>glfwGetMonitorName</code>.\nWrapper around <code>glfwGetKeyName</code> without scancode\nWrapper for <code>glfwGetJoystickName</code>.\nWrapper for <code>glfwGetWindowOpacity</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>OPENGL_PROFILE</code>.\nWrapper for <code>glfwGetMonitorPhysicalSize</code>.\nWrapper for <code>glfwGetMonitorPos</code>.\nWrapper for <code>glfwGetWindowPos</code>.\nReturns the address of the specified client API or …\nReturns the address of the specified client API or …\nWrapper around <code>glfwGetKeyScancode</code>.\nWrapper for <code>glfwGetWindowSize</code>.\nReturns the current value of the GLFW timer. Unless the …\nWrapper for <code>glfwGetTimerFrequency</code>\nWrapper for <code>glfwGetTimerValue</code>.\nWrapper for <code>glfwGetVersion</code>.\nWrapper for <code>glfwGetVersionString</code>.\nWrapper for <code>glfwGetVideoMode</code>.\nWrapper for <code>glfwGetVideoModes</code>.\nWrapper for <code>glfwGetMonitorWorkarea</code>.\nWrapper for <code>glfwGetX11Display</code>\nWrapper for <code>glfwGetX11Window</code>\nWrapper for <code>glfwGetInputMode</code> called with <code>STICKY_KEYS</code>.\nWrapper for <code>glfwGetInputMode</code> called with …\nHeight of the image in pixels\nWrapper for <code>glfwHideWindow</code>.\nWrapper for <code>glfwIconifyWindow</code>.\nInitializes the GLFW library. This must be called on the …\nSets hints for the next initialization of GLFW.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>AUTO_ICONIFY</code>.\nReturns <code>true</code> if the window is the current context.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>DECORATED</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>FLOATING</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>FOCUS_ON_SHOW</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>FOCUSED</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with …\nWrapper for <code>glfwJoystickIsGamepad</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>HOVERED</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>ICONIFIED</code>.\nWrapper for <code>glfwGetWindowattrib</code> called with <code>MAXIMIZED</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with …\nWrapper for <code>glfwGetWindowAttrib</code> called with …\nWrapper for <code>glfwJoystickPresent</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>RESIZABLE</code>.\nWrapper for <code>glfwGetWindowAttrib</code> called with <code>VISIBLE</code>.\nWrapper around <code>glfwGetKeyName</code>\nThe function to be used with the <code>LOG_ERRORS</code> callback.\nWrapper for <code>glfwMakeContextCurrent</code>.\nMakes the context of the specified window current. If no …\nWrapper for <code>glfwMakeContextCurrent</code>\nWrapper for <code>glfwMaximizeWindow</code>\nWrapper around <code>glfwGetKeyName</code> without scancode\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nPixels are 4 bytes each, one byte for each RGBA subpixel.\nImmediately process the received events.\nImmediately process the received events. The <em>unbuffered</em> …\nWrapper for <code>glfwPostEmptyEvent</code>.\nPosts an empty event from the current thread to the event …\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nReturns a render context that can be shared between tasks, …\nWrapper for <code>glfwRequestWindowAttention</code>.\nWrapper for <code>glfwRestoreWindow</code>.\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nStarts or stops polling for all available events\nWrapper for <code>glfwSetWindowAspectRatio</code>.\nWrapper for <code>glfwSetWindowAttrib</code> called with <code>AUTO_ICONIFY</code>.\nWrapper for <code>glfwSetCharModsCallback</code>\nWrapper for <code>glfwSetCharCallback</code>.\nWrapper for <code>glfwGetClipboardString</code>.\nWrapper for <code>glfwSetWindowCloseCallback</code>.\nWrapper for <code>glfwSetWindowContentScaleCallback</code>.\nWrapper for <code>glfwSetCursor</code> using <code>Cursor</code>\nWrapper for <code>glfwSetCursorEnterCallback</code>.\nWrapper for <code>glfwSetInputMode</code> called with <code>CURSOR</code>.\nWrapper for <code>glfwSetCursorPos</code>.\nWrapper for <code>glfwSetCursorPosCallback</code>.\nWrapper for <code>glfwSetWindowAttrib</code> called with <code>DECORATED</code>.\nWrapper for <code>glfwSetDropCallback</code>.\nSets the error callback, overwriting the previous one …\nWrapper for <code>glfwSetWindowAttrib</code> called with <code>FLOATING</code>.\nWrapper for <code>glfwSetWindowAttrib</code> called with <code>FOCUS_ON_SHOW</code>.\nWrapper for <code>glfwSetWindowFocusCallback</code>.\nWrapper for <code>glfwSetFramebufferSizeCallback</code>.\nWrapper for <code>glfwSetGamma</code>.\nWrapper for <code>glfwSetGammaRamp</code>.\nSets the window icon via <code>glfwSetWindowIcon</code> from a set a …\nWrapper for <code>glfwSetWindowIconifyCallback</code>.\nSets the joystick callback, overwriting the previous one …\nWrapper for <code>glfwSetKeyCallback</code>.\nWrapper for <code>glfwSetWindowMaximizeCallback</code>.\nWrapper for <code>glfwSetWindowMonitor</code>\nSets the monitor callback, overwriting the previous one …\nWrapper for <code>glfwSetMouseButtonCallback</code>.\nWrapper for <code>glfwSetWindowOpacity</code>.\nWrapper for <code>glfwSetWindowPos</code>.\nWrapper for <code>glfwSetWindowPosCallback</code>.\nWrapper for <code>glfwSetInputMode</code> called with <code>RAW_MOUSE_MOTION</code>\nWrapper for <code>glfwSetWindowRefreshCallback</code>.\nWrapper for <code>glfwSetWindowAttrib</code> called with <code>RESIZABLE</code>.\nWrapper for <code>glfwSetScrollCallback</code>.\nWrapper for <code>glfwSetWindowShouldClose</code>.\nWrapper for <code>glfwSetWindowShouldClose</code>.\nWrapper for <code>glfwSetWindowSize</code>.\nWrapper for <code>glfwSetWindowSizeLimits</code>.\nWrapper for <code>glfwSetWindowSizeCallback</code>.\nWrapper for <code>glfwSetInputMode</code> called with <code>STICKY_KEYS</code>.\nWrapper for <code>glfwSetInputMode</code> called with …\nWrapper for <code>glfwSetInputMode</code> called with <code>LOCK_KEY_MODS</code>\nSets the number of screen updates to wait before swapping …\nSets the value of the GLFW timer.\nSets the title of the window.\nWrapper for <code>glfwWindowShouldClose</code>.\nWrapper for <code>glfwWindowShouldClose</code>.\nWrapper for <code>glfwShowWindow</code>.\nCreate a new cursor using <code>glfwCreateStandardCursor</code>\nReplacement for <code>String::from_raw_buf</code>\nLike <code>string_from_c_str</code>, but handles null pointers correctly\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nWrapper for <code>glfwRawMouseMotionSupported</code>.\nSwaps the front and back buffers of the window. If the …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nParses the specified ASCII encoded string and updates the …\nWrapper for <code>glfwGetInputMode</code> called with <code>RAW_MOUSE_MOTION</code>\nSleep until at least one event has been received, and then …\nSleep until at least one event has been received, or until …\nSleep until at least one event has been received, or until …\nSleep until at least one event has been received, and then …\nWidth of the image in pixels\nThis is used to set the window hints for the next call to …\nReturns the unique identifier for this window.\nReturns the pointer to the underlying <code>GLFWwindow</code>.\nReplacement for <code>ToCStr::with_c_str</code>\nSupplies a vector of the currently connected monitors to …\nSupplies the primary monitor to the closure provided, if …\nReturns whether the window is fullscreen or windowed.\nPixels are 4-bytes each, RGBA\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")