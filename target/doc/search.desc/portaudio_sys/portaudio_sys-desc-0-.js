searchState.loadedDescShard("portaudio_sys", 0, "No value.\nNo value.\nThe type used to refer to audio devices. Values of this …\nA structure providing information and capabilities of …\nError codes returned by PortAudio functions. Note that …\nThe type used to enumerate to host APIs at runtime. Values …\nA structure containing information about a particular host …\nUnchanging unique identifiers for each supported host API. …\nStructure used to return information about a host error …\nA type used to specify one or more sample formats. Each …\nA single PaStream can provide multiple channels of …\nFunctions of type PaStreamCallback are implemented by …\nFlag bit constants for the statusFlags to PaStreamCallback.\nAllowable return values for the PaStreamCallback. @see …\nTiming information for the buffers passed to the stream …\nFunctions of type PaStreamFinishedCallback are implemented …\nFlags used to control the behavior of a stream. They are …\nA structure containing unchanging information about an …\nParameters for one direction (input or output) of a stream.\nThe type used to represent monotonic time in seconds. …\nA structure containing PortAudio API version information. …\nTerminates audio processing immediately without waiting …\nCloses an audio stream. If the audio stream is active it …\nRetrieve the index of the default host API. The default …\nRetrieve the index of the default input device. The result …\nRetrieve the index of the default output device. The …\nRetrieve the number of available devices. The number of …\nRetrieve a pointer to a PaDeviceInfo structure containing …\nTranslate the supplied PortAudio error code into a human …\nRetrieve the number of available host APIs. Even if a host …\nRetrieve a pointer to a structure containing information …\nReturn information about the last host error encountered. …\nRetrieve the size of a given sample format in bytes.\nRetrieve CPU usage information for the specified stream. …\nRetrieve a pointer to a PaStreamInfo structure containing …\nRetrieve the number of frames that can be read from the …\nReturns the current time in seconds for a stream according …\nRetrieve the number of frames that can be written to the …\nRetrieve the release number of the currently running …\nRetrieve version information for the currently running …\nRetrieve a textual description of the current PortAudio …\nConvert a host-API-specific device index to standard …\nConvert a static host API unique identifier, into a runtime\nLibrary initialization function - call this before using …\nDetermine whether it would be possible to open a stream …\nDetermine whether the stream is active. A stream is active …\nDetermine whether the stream is stopped. A stream is …\nA simplified version of Pa_OpenStream() that opens the …\nOpens a stream for either input, output or both.\nRead samples from an input stream. The function doesn’t …\nRegister a stream finished callback function which will be …\nPut the caller to sleep for at least ‘msec’ …\nCommences audio processing.\nTerminates audio processing. It waits until all pending …\nLibrary termination function - call this when finished …\nWrite samples to an output stream. This function doesn’t …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nA function to convert C <code>*const char</code> arrays into Rust …\nThe number of channels of sound to be delivered to the …\n&lt; The time when the stream callback was invoked\nDefault latency values for robust non-interactive …\nThe default input device for this host API. The value will …\nDefault latency values for interactive performance.\nThe default output device for this host API. The value …\nA valid device index in the range 0 to …\nThe number of devices belonging to this host API. This …\n&lt; the error code returned\n&lt; a textual description of the error if available, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n&lt; note this is a host API index, not a type id\nAn optional pointer to a host api specific data structure …\n&lt; the host API which returned the error code\n&lt; The time when the first sample of the input buffer was …\nThe input latency of the stream in seconds. This value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA textual description of the host API for display on user …\n&lt; The time when the first sample of the output buffer will …\nThe output latency of the stream in seconds. This value …\nThe sample format of the buffer provided to the stream …\nThe sample rate of the stream in Hertz (samples per …\nA function to convert Rust strings to C strings\nthis is struct version 1\nthis is struct version 1\nThe desired latency in seconds. Where practical, …\nThe well known unique identifier of this host API @see …\nThis is currently the Git revision hash but may change in …\nVersion as a string, for example “PortAudio …")